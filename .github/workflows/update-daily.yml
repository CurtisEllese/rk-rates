name: Update daily rates (RSS -> PR -> auto-merge)


permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: "15 3 * * 1-5"

  workflow_dispatch: {}

concurrency:
  group: rates-${{ github.workflow }}
  cancel-in-progress: true


jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install deps
        run: |
          echo "requests==2.32.3" > requirements.txt
          pip install -r requirements.txt

      - name: Fetch & update last business day (RSS NBK)
        run: |
          python - << 'PY'
          import os, csv, re, xml.etree.ElementTree as ET, datetime as dt, json, requests, pathlib
          UA={"User-Agent":"rk-rates-bot/1.0","Accept":"application/xml"}
          BASE="https://nationalbank.kz/rss/get_rates.cfm?fdate={}"
          def ddmmyyyy(d): return d.strftime("%d.%m.%Y")
          def ymd(d): return d.strftime("%Y-%m-%d")
          def prev_bd(d):
            while d.weekday()>=5: d-=dt.timedelta(days=1)
            return d
          def fetch_day(d):
            r=requests.get(BASE.format(ddmmyyyy(d)),headers=UA,timeout=20); r.raise_for_status()
            root=ET.fromstring(r.content); out=[]
            for item in root.findall(".//item"):
              code=None
              for tag in ("index","title","charcode","code"):
                el=item.find(tag)
                if el is not None and (el.text or "").strip():
                  t=re.sub(r"[^A-Za-z]","",el.text).upper()
                  if re.fullmatch(r"[A-Z]{3}",t): code=t; break
              if not code or code=="KZT": continue
              rate=None
              for tag in ("description","value","target","current"):
                el=item.find(tag)
                if el is not None and (el.text or "").strip():
                  s=el.text.replace("\xa0"," ").replace(" ","").replace(",",".")
                  m=re.search(r"[-+]?\d+(?:\.\d+)?",s)
                  if m: rate=float(m.group()); break
              if rate is None:
                s=" ".join([(item.find(t).text or "") for t in ("description","title","fullname") if item.find(t) is not None])
                s=s.replace("\xa0"," ").replace(" ","").replace(",",".")
                m=re.search(r"[-+]?\d+(?:\.\d+)?",s)
                if m: rate=float(m.group())
              if rate is None: continue
              out.append({"date": ymd(d), "currency": code, "rate": round(rate,4)})
            uniq={}
            for it in out: uniq[(it["date"],it["currency"])]=it["rate"]
            return [{"date":d,"currency":c,"rate":r} for (d,c),r in sorted(uniq.items())]
          today=dt.date.today()
          d=prev_bd(today)
          items=fetch_day(d)
          if not items:
            alt=prev_bd(d-dt.timedelta(days=1))
            items=[{"date": ymd(d), "currency": it["currency"], "rate": it["rate"]} for it in fetch_day(alt)]
          os.makedirs("data/daily",exist_ok=True)
          # upsert year csv
          path=f"data/{d.year}.csv"; store={}
          if os.path.exists(path):
            with open(path,"r",encoding="utf-8") as f:
              for r in csv.DictReader(f):
                store[(r["date"], (r["currency"] or "").upper())]=float(r["rate"])
          for it in items:
            store[(it["date"], it["currency"].upper())]=float(it["rate"])
          with open(path,"w",encoding="utf-8",newline="") as f:
            w=csv.writer(f); w.writerow(["date","currency","rate"])
            for (dd,cc),rr in sorted(store.items()):
              w.writerow([dd,cc,f"{rr:.4f}"])
          with open(f"data/daily/{ymd(d)}.json","w",encoding="utf-8") as f:
            json.dump(items,f,ensure_ascii=False,indent=2)
          print("updated:", ymd(d), "rows:", len(items))
          if pathlib.Path(path).exists():
            with open(path,"r",encoding="utf-8") as f:
              for i,line in zip(range(20),f): print(line.rstrip())
          PY

      - name: Upload artifacts (preview)
        uses: actions/upload-artifact@v4
        with:
          name: daily-update-preview
          path: |
            data/*.csv
            data/daily/*.json
          if-no-files-found: warn

      - name: Create/Update PR (static branch bot/rates)
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: bot/rates
          title: "chore: update daily rates"
          commit-message: "chore: update daily rates [skip ci]"
          author: rates-bot <rates-bot@users.noreply.github.com>
          signoff: false
          delete-branch: false
          labels: rates, auto-merge

      - name: Auto approve PR (optional)
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: hmarr/auto-approve-action@v4
        with:
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          github-token: ${{ secrets.AUTO_TOKEN || secrets.GITHUB_TOKEN }}


      - name: Enable auto-merge
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash
          token: ${{ secrets.AUTO_TOKEN || secrets.GITHUB_TOKEN }}

